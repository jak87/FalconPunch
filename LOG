1/27/13
Attendees: Svetlin, Ben, Jack
Questions:
1) Why does <pthread.h> not register when the program is
being made with server.c? (See comment 2) 
Decisions:
---
Todo:
Finish Assignment 1
Comments/Notes:
1) Finished Assignment 1
2) There was a problem with pthread not being included
when making the program, so we included it directly
in the Makefile when linking.
3) Answers to questions in Programs:

server.c :
1) What does ntohl do?
   -Changes the byte order from network order to host,
    preventing byte order conflicts between local machines
    and networks. (Converts it from most significant byte
    order to least).
2) What is happening in "pthread_create(&tid, NULL, &doit, (void *)connfd);"?
   -It's creating a new thread that will be given the ID at
    tid. The NULL means that there are no special attributes
    for its initialization, and when the new thread is created
    it will start from the doit function (hence the reference
    to doit's address being passed in). connfd is getting
    passed to doit, and is being cast as a void pointer to
    be properly passed into doit.

client.c :
1) What does getInput() do, and why?
   -After zeroing the buffer, it reads in a line from stdin
    to globals' LineBuffer data buffer. It then checks to
    see if the final character is a "\n" or not. If it is,
    then it removes it since we don't want to echo that
    (though it notes that there is a newline at the end of
    the buffer). It keeps track of newline because doSend 
    calls getInput until there is a newline.
2) What does sendStr() do, and how?
   -It first determines the length of the string that it needs
    to send and converts it to network byte order. It then
    writes the length of an int into nlen and the length of the
    string into the first part of the string that's going to be
    sent. It allocates a buffer of length len and reads 
    the message that should be the same length. If at any point 
    it returns -1 instead of 1, it'll throw an error showing that 
    the send failed and the connection will end and the buffer 
    will be freed.

2/10/13
Attendees: Ben, Jack (in contact with Svetlin)
Questions: 
--Does marshalling take place before the calls to the session, or
  in the called functions?
Decisions:
1) Meet up on Friday or Saturday.
2) Split up work between files (though helping each other if questions
   come up and understanding the code for each).
3) Finish each part and meet up to make sure the code works so we can
   move on to next part of the assignment.
Todo: 
--Familiarize with code
--Start assignment 2
--Divide up workload
--Setup next meet time
Comments/Notes:
1) Finished all marshalling / unmarshalling functions in 
   proto_session.c.
 
2/16/13
Attendees: Jack, Svetlin, Ben
Questions:
-Why don't we marshall in the session?
Decisions:
1) Now that we all know what's going on, finish all the functions individually
2) Meet up Tuesday evening to decide more stuff
Todo: (between now and next time)
1) Finish replacing all NYI()s so we can start working on Tic-Tac-Toe
Comments/Notes: 
1) Managed to make everything compile
2) Managed to implement most functions without NYI()s 
   (except proto_session_rpc()) 
3) Server starts listening for RPC and the client attempts
   to connect (well, it did, but it caused an event that
   broke the connection).

2/20/13
Attendees: Jack, Ben, Svetlin
Questions:
--
Decisions:
-Meetup again tomorrow, hopefully finish
Todo:
-Make gameboard display
-Make it so that the server doesn't crash when a client disconnects
Comments/Notes:
-It's compiling fine on csa2, but there's a weird scanf error on curzon
-Made the client match the inputs specified in the pdf
-protocol_server can successfully assign X and O to players
-protocol_server can successfully register moves (though this is
 done at low-level encoding - should be able to make better)
